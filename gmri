#!/usr/bin/env python

import g_mri
import sys


help = '''
===============================================================================
gmri utility for MRI processing.

use: gmri command [option=value] [option=value] ...

List of available commands:

dicom utilities
---------------

listDicom [folder=.]
    - folder: the base subject folder that contains the inbox with unsorted dicom files

    example: gmri listDicom folder=data

splitDicom [folder=.]
    - folder: the base subject folder that contains the inbox with unsorted dicom files

    example: gmri splitDicom folder=data

sortDicom [folder=.]
    - folder: the base subject folder that contains the inbox with unsorted dicom files

    example: gmri sortDicom folder=data

dicom2nii [folder=.] [clean=ask] [unzip=ask] [gzip=ask]
    - folder: the base subject folder with the dicom subfolder that holds session numbered folders with dicom files
    - clean: whether to remove preexisting NIfTI files (yes), leave them and abort (no)
      or ask interactively (ask)
    - unzip: if the dicom files are gziped whether to unzip them (yes), leave them and
      abort (no) or ask interactively (ask)
    - gzip: after the dicom files were processed whether to gzip them (yes), leave them (no)
      or ask interactively (ask)

    example: gmri dicom2nii folder=. clean=yes unzip=yes gzip=ask

processPhilips [folder=.] [check=yes] [pattern=OP]
    Checks for new packages off the scanner in the inbox folder, unzips them and moves them to Archive folder,
    runs sortDicom and dicom2nii on the package contents. Assumes that packages are in the inbox folder and
    their names contain OP number. The command is adjusted to work with packages off the Philips scanner in Ljubljana.

    - folder: the base study subjects folder (e.g. WM44/subjects) where OP folders and the inbox folder with the
      new packages from the scanner reside
    - check: whether to ask for confirmation to proceed once zip packages in inbox are identified and listed.
    - pattern: the prefix used in packets names (e.g. paket432_OP396*.zip)

    example: gmri processPhilips folder=. check=yes


runAvi [folder=.] [overwrite=no]
    Runs Avi preprocessing script on the subject data in specified folder. Uses subject.txt to identify structural and
    BOLD runs and DICOM-report.txt to get TR value. The processing is saved to a datestamped log in the 4dfp folder.

    - folder: subject's folder with nii and dicom folders and subject.txt file.
    - overwrite: whether to overwrite existing params file or exisiting BOLD data


runAviFolder [folder=.] [pattern=OP*] [overwrite=no]
    Goes through the folder and runs runAvi on all the subfolders that match the pattern. Setting overwrite
    to overwrite.

    - folder: the base study subjects folder (e.g. WM44/subjects) where OP folders and the inbox folder with the
      new packages from the scanner reside,
    - pattern: which subjectfolders to match (default OP*),
    - overwrite: whether to overwrite existing (params and BOLD) files.

    example: gmri runAviFolder folder=. pattern=OP* overwrite=no

NIfTI file conversions
----------------------

fz2zf inf=<input_image> [outf=<output_image>]
    Converts the xyfz order of data to xyzf (needed for Philips functionals, DTIs, ...).
    - inf:  input image filename to be shuffled
    - outf: output image filename
    If outf is not provided, it replaces the original file.

reorder inf=<input_image> [outf=<output_image>]
    Reorders the slices (y dimension) for images that are upside down.
    - inf:  input image filename to be reordered
    - outf: output image filename
    If outf is not provided, it replaces the original file.

reslice inf=<input_image> slices=<slices_per_volume> [outf=<output_image>]
    Removes extra slices for interrupted BOLD sequences and creates an image with good
    frames with data in xyzf order.

    WARNING: it assumes ascending interpolated aquisition of sices!!

    - inf:    input image filename to be reordered
    - slices: number of slices per volume
    - outf:   output image filename

    If outf is not provided, it replaces the original file.

    example: gmri reslice 07.nii.gz 48

HCP setup commands
------------------

setupHCP [folder=.] [tfolder=hcp] [sbjf=subject.txt]
    - folder:  the base subject folder that contains the nifti images and subject.txt file
    - tfolder: the folder (within the base folder) where to put the HCP data
    - sbjf:    the alternative name of the subject.txt file

    example: gmri setupHCP folder=data tfolder=hcp2 sbjf=subject1.txt

HCPPhilips [folder=.] [sfile=subject.txt] [tfile=subject.txt]
    Processes subject.txt file for data off Philips scanner in Ljubljana to insert appropriate
    names undestood by setupHCP command.


NIfTI header utilities
----------------------

printniftihdr <image_filename>
    Prints the header contents of the NIfTI file.

modniftihdr <image_filename> <modification string>
    Modifies the NIfTI header in place. It reads the header, changes according to information
    in the modification string and writes the header back.

    example: gmri modniftihdr img.nii.gz "srow_x:[0.7,0.0,0.0,-84.0];srow_y:[0.0,0.7,0.0,-112.0];srow_z:[0.0,0.0,0.7,-126]"


Fidl file utilities
-------------------

joinFidl concfile=<reference_conc_file> fidlroot=<fidl_files_root_pattern>
    Combines all the fild files matching root based on the information in conc file.
    - concfile:  the conc file to use as reference
    - fidlroot:  the root to use to find fild files

    example: gmri joinFidl concfile=OP33-WM.conc fidlroot=OP33-WM

joinFidlFolder concfolder=<folder_with_conc_files> [fidlfolder=<folder_with_fidl_files>] [outfolder=<folder in which to save joint files>]
    Uses joinFidl to join all the fidl files that match the name of each conc file in the concfolder.
    - concfolder:  the folder with conc files
    - fidlfolder:  the folder with fidl files - defaults to concfolder if not provided
    - outfolder:   the folder in which the joint files should be saved, defauts to fidlfolder if not provided

    example gmri joinFidlFolder concfolder=concs fidlfolder=fidls


Transformation utilities
------------------------

map2PALS volume=<volume file> metric=<metric file> [atlas=711-2C] [method=interpolated] [mapping=afm]
    Maps volume files to metric surface files using PALS12 surface atlas.
    - volume:   a volume file or a space separated list of volume files - put in quotes
    - metric:   the name of the metric file that stores the mapping
    - atlas:    volume atlas from which to map (711-2C by default or 711-2B, AFNI, FLIRT, FNIRT, SPM2, SPM5, SPM95, SPM96, SPM99, MRITOTAL)
    - method:   intepolated, maximum, enclosing, strongest, gaussian (for other options see caret_command)
    - mapping:  a single mapping option or a space separated list in quotes, default: afm
                afm: average fiducial mapping
                mfm: average of mapping to all PALS cases (multifiducial mapping)
                min: minimum of mapping to all PALS cases
                max: maximum of mapping to all PALS cases
                std-dev: sample standard deviation of mapping to all PALS cases
                std-error: standard error of mapping to all PALS cases
                all-cases: mapping to each of the PALS12 cases


===============================================================================
'''

commands = {'listDicom'     : { 'com': g_mri.g_dicom.listDicom,        'args': ('folder', ) },
            'splitDicom'    : { 'com': g_mri.g_dicom.splitDicom,       'args': ('folder', ) },
            'sortDicom'     : { 'com': g_mri.g_dicom.sortDicom,        'args': ('folder', ) },
            'dicom2nii'     : { 'com': g_mri.g_dicom.dicom2nii,        'args': ('folder', 'clean', 'unzip', 'gzip', 'verbose') },
            'processPhilips': { 'com': g_mri.g_dicom.processPhilips,   'args': ('folder', 'check', 'pattern') },
            'runAviFolder'  : { 'com': g_mri.g_4dfp.runAviFolder,      'args': ('folder', 'pattern', 'overwite') },
            'runAvi'        : { 'com': g_mri.g_4dfp.runAvi,            'args': ('folder', 'overwite') },
            'fz2zf'         : { 'com': g_mri.g_NIfTI.fz2zf,            'args': ('inf', 'outf') },
            'reorder'       : { 'com': g_mri.g_NIfTI.reorder,          'args': ('inf', 'outf') },
            'reslice'       : { 'com': g_mri.g_NIfTI.reslice,          'args': ('inf', 'slices', 'outf') },
            'setupHCP'      : { 'com': g_mri.g_HCP.setupHCP,           'args': ('folder', 'tfolder', 'subjf') },
            'HCPPhilips'    : { 'com': g_mri.g_HCP.renameHCPPhilips,   'args': ('folder', 'sfile', 'tfile') },
            'printniftihdr' : { 'com': g_mri.g_img.printniftihdr,      'args': ('filename', ) },
            'modniftihdr'   : { 'com': g_mri.g_gimg.modifyNIfTIHeader, 'args': ('filename', 's')},
            'joinFidl'      : { 'com': g_mri.g_fidl.joinFidl,          'args': ('concfile', 'fidlroot')},
            'joinFidlFolder': { 'com': g_mri.g_fidl.joinFidlFolder,    'args': ('concfolder', 'fidlfolder', 'outfolder')},
            'splitFidl'     : { 'com': g_mri.g_fidl.splitFidl,         'args': ('concfile', 'fidlfile', 'outfolder')},
            'map2PALS'      : { 'com': g_mri.g_4dfp.map2PALS,          'args': ('volume', 'metric', 'atlas', 'method', 'mapping')}
            }

def runCommand(command, args):
    if command in commands:
        commands[command]['com'](**args)
    else:
        print help
        sys.exit(1)


def main(args=None):
    if args is None:
        args = sys.argv[1:]

    if len(args) == 0:
        print help
        sys.exit(1)

    comm = args[0]
    opts = dict()

    try:
        for n in range(1,len(args)):
            if "=" in args[n]:
                k, v = args[n].split("=")
                opts[k] = v
            else:
                k = commands[comm]['args'][n-1]
                opts[k] = args[n]

        runCommand(comm, opts)
    except:
        print help
        raise
        sys.exit(1)

if __name__ == "__main__":
    main()
