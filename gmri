#!/opt/local/bin/python2.7

import g_mri
import sys


help = '''
--------
gmri utility for MRI processing.

use: gmri command [option=value] [option=value] ...

List of available commands:

listDicom [folder=.]
    - folder: the base subject folder that contains the inbox with unsorted dicom files

    example: gmri listDicom folder=data

splitDicom [folder=.]
    - folder: the base subject folder that contains the inbox with unsorted dicom files

    example: gmri splitDicom folder=data

sortDicom [folder=.]
    - folder: the base subject folder that contains the inbox with unsorted dicom files

    example: gmri sortDicom folder=data

dicom2nii [folder=.] [clean=ask] [unzip=ask] [gzip=ask]
    - folder: the base subject folder with the dicom subfolder that holds session numbered folders with dicom files
    - clean: whether to remove preexisting NIfTI files (yes), leave them and abort (no)
      or ask interactively (ask)
    - unzip: if the dicom files are gziped whether to unzip them (yes), leave them and
      abort (no) or ask interactively (ask)
    - gzip: after the dicom files were processed whether to gzip them (yes), leave them (no)
      or ask interactively (ask)

    example: gmri dicom2nii folder=. clean=yes unzip=yes gzip=ask

fz2zf inf=<input_image> [outf=<output_image>]
    Converts the xyfz order of data to xyzf (needed for Philips functionals, DTIs, ...).
    - inf:  input image filename to be shuffled
    - outf: output image filename
    If outf is not provided, it replaces the original file.

setupHCP [folder=.] [tfolder=hcp] [sbjf=subject.txt]
    - folder:  the base subject folder that contains the nifti images and subject.txt file
    - tfolder: the folder (within the base folder) where to put the HCP data
    - sbjf:    the alternative name of the subject.txt file

    example: gmri setupHCP folder=data tfolder=hcp2 sbjf=subject1.txt

printniftihdr <image_filename>
    Prints the header contents of the NIfTI file.

modniftihdr <image_filename> <modification string>
    Modifies the NIfTI header in place. It reads the header, changes according to information
    in the modification string and writes the header back.

    example: gmri modniftihdr img.nii.gz "srow_x:[0.7,0.0,0.0,-84.0];srow_y:[0.0,0.7,0.0,-112.0];srow_z:[0.0,0.0,0.7,-126]"

--------
'''

commands = {'listDicom'    : { 'com': g_mri.g_dicom.listDicom,        'args': ('folder', ) },
            'splitDicom'   : { 'com': g_mri.g_dicom.splitDicom,       'args': ('folder', ) },
            'sortDicom'    : { 'com': g_mri.g_dicom.sortDicom,        'args': ('folder', ) },
            'dicom2nii'    : { 'com': g_mri.g_dicom.dicom2nii,        'args': ('folder', 'clean', 'unzip', 'gzip', 'verbose') },
            'fz2zf'        : { 'com': g_mri.g_NIfTI.fz2zf,            'args': ('inf', 'outf') },
            'setupHCP'     : { 'com': g_mri.g_HCP.setupHCP,           'args': ('folder', 'tfolder', 'subjf') },
            'printniftihdr': { 'com': g_mri.g_img.printniftihdr,      'args': ('filename', ) },
            'modniftihdr'  : { 'com': g_mri.g_gimg.modifyNIfTIHeader, 'args': ('filename', 's')}}

def runCommand(command, args):
    if command in commands:
        commands[command]['com'](**args)
    else:
        print help
        sys.exit(1)


def main(args=None):
    if args is None:
        args = sys.argv[1:]

    if len(args) == 0:
        print help
        sys.exit(1)

    comm = args[0]
    opts = dict()

    try:
        for n in range(1,len(args)):
            if "=" in args[n]:
                k, v = args[n].split("=")
                opts[k] = v
            else:
                k = commands[comm]['args'][n-1]
                opts[k] = args[n]

        runCommand(comm, opts)
    except:
        print help
        raise
        sys.exit(1)

if __name__ == "__main__":
    main()
