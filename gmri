#!/usr/bin/env python
# encoding: utf-8

import g_mri
import sys


help = '''
gmri utility for MR processing
usage: gmri <command> <argument> ...
       gmri -h  (prints this help)
       gmri -l  (list commands)
       gmri -<command> (print help for a given command)
'''

comlist = '''
===============================================================================
gmri utility for MRI processing.

use: gmri command [option=value] [option=value] ...


dicom utilities
---------------

listDicom    [folder=.]
splitDicom   [folder=.]
sortDicom    [folder=.]
dicom2nii    [folder=.] [clean=ask] [unzip=ask] [gzip=ask]
processInbox [folder=.] [check=yes] [pattern=".*?(OP[0-9.-]+).*\.zip"]


Avi pipeline utilities
----------------------

runAvi       [folder=.] [overwrite=no] [subjf=subject.txt]
runAviFolder [folder=.] [pattern=OP*] [overwrite=no] [subjf=subject.txt]


NIfTI file conversions
----------------------
fz2zf         inf=<input_image> [outf=<output_image>]
reorder       inf=<input_image> [outf=<output_image>]
reslice       inf=<input_image> slices=<slices_per_volume> [outf=<output_image>]
printniftihdr <image_filename>
modniftihdr   <image_filename> <modification string>
nifti24dfp    inf=<input_filename> [outf=<output_filename>]


HCP setup commands
------------------

setupHCP       [folder=.] [tfolder=hcp] [sbjf=subject_hcp.txt]
setupHCPFolder [folder=.] [tfolder=hcp] [sbjf=subject_hcp.txt] [check=interactive]
getHCPReady    [folder=.] [sfile=subject.txt] [tfile=subject_hcp.txt] [pattern="*"] [mapping=specs/hcpmap.txt]


Fidl file utilities
-------------------

joinFidl       concfile=<reference_conc_file> fidlroot=<fidl_files_root_pattern>
joinFidlFolder concfolder=<folder_with_conc_files> [fidlfolder=<folder_with_fidl_files>] [outfolder=<folder in which to save joint files>]
splitFidl      concfile=<reference_conc_file> fidlfile=<fidl_file_to_split> [outfolder=<folder_to_save_results>]


Caret surface mapping utilities
-------------------------------

map2PALS volume=<volume file> metric=<metric file> [atlas=711-2C] [method=interpolated] [mapping=afm]
'''

commands = {'listDicom'     : { 'com': g_mri.g_dicom.listDicom,        'args': ('folder', ) },
            'splitDicom'    : { 'com': g_mri.g_dicom.splitDicom,       'args': ('folder', ) },
            'sortDicom'     : { 'com': g_mri.g_dicom.sortDicom,        'args': ('folder', ) },
            'dicom2nii'     : { 'com': g_mri.g_dicom.dicom2nii,        'args': ('folder', 'clean', 'unzip', 'gzip', 'verbose') },
            'processPhilips': { 'com': g_mri.g_dicom.processPhilips,   'args': ('folder', 'check', 'pattern') },
            'processInbox'  : { 'com': g_mri.g_dicom.processInbox,     'args': ('folder', 'check', 'pattern') },
            'runAviFolder'  : { 'com': g_mri.g_4dfp.runAviFolder,      'args': ('folder', 'pattern', 'overwite', 'subjf') },
            'runAvi'        : { 'com': g_mri.g_4dfp.runAvi,            'args': ('folder', 'overwite', 'subjf') },
            'fz2zf'         : { 'com': g_mri.g_NIfTI.fz2zf,            'args': ('inf', 'outf') },
            'reorder'       : { 'com': g_mri.g_NIfTI.reorder,          'args': ('inf', 'outf') },
            'reslice'       : { 'com': g_mri.g_NIfTI.reslice,          'args': ('inf', 'slices', 'outf') },
            'nifti24dfp'    : { 'com': g_mri.g_NIfTI.nifti24dfp,       'args': ('inf', 'outf') },
            'setupHCP'      : { 'com': g_mri.g_HCP.setupHCP,           'args': ('folder', 'tfolder', 'subjf') },
            'setupHCPFolder': { 'com': g_mri.g_HCP.setupHCPFolder,     'args': ('folder', 'tfolder', 'subjf', 'check') },
            'getHCPReady'   : { 'com': g_mri.g_HCP.getHCPReady,        'args': ('folder', 'sfile', 'tfile', 'pattern', 'mapping') },
            'printniftihdr' : { 'com': g_mri.g_img.printniftihdr,      'args': ('filename', ) },
            'modniftihdr'   : { 'com': g_mri.g_gimg.modniftihdr,       'args': ('filename', 's')},
            'joinFidl'      : { 'com': g_mri.g_fidl.joinFidl,          'args': ('concfile', 'fidlroot', 'outfolder')},
            'joinFidlFolder': { 'com': g_mri.g_fidl.joinFidlFolder,    'args': ('concfolder', 'fidlfolder', 'outfolder')},
            'splitFidl'     : { 'com': g_mri.g_fidl.splitFidl,         'args': ('concfile', 'fidlfile', 'outfolder')},
            'map2PALS'      : { 'com': g_mri.g_4dfp.map2PALS,          'args': ('volume', 'metric', 'atlas', 'method', 'mapping')}
            }


def runCommand(command, args):
    if command in commands:
        commands[command]['com'](**args)
    else:
        print help
        sys.exit(1)


def printHelp(com):

    if com == 'l':
        print comlist
    elif com in commands:
        print "\ngmri", commands[com]['com'].__doc__.strip(), "\n"
    else:
        print comlist


def main(args=None):
    if args is None:
        args = sys.argv[1:]

    if len(args) == 0:
        print help
        sys.exit(1)

    comm = args[0]
    opts = dict()

    if comm[0] == '-':
        printHelp(comm[1:])
        sys.exit(0)

    try:
        for n in range(1, len(args)):
            if "=" in args[n]:
                k, v = args[n].split("=")
                opts[k] = v
            else:
                k = commands[comm]['args'][n - 1]
                opts[k] = args[n]

        runCommand(comm, opts)
    except:
        print "\n-----------------------\n\nOps! Something went wrong. Here is the help for the command you ran:"
        printHelp(comm)
        print "-----------------------\n\nHere's the error as caught by python:\n"
        raise
        print "\n-----------------------\n"
        sys.exit(1)

if __name__ == "__main__":
    main()
