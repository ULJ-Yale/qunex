#!/usr/bin/env python
# encoding: utf-8

# SPDX-FileCopyrightText: 2024 QuNex development team <https://qunex.yale.edu/>
#
# SPDX-License-Identifier: GPL-3.0-or-later

# -- concatenated list of all qunex commands
# (full_name, description, language)
# language can either be "bash", "matlab", "python", or "r"
all_qunex_commands = [
    # ("qx_utilities.r.bold_movement",                                "Plots movement data, creates movement reports and information for data scrubbing.",      "r"), # added as an example for R language
    ("qx_utilities.general.bruker.bruker_to_dicom",                 "Converts bruker data into the dicom format.",                                              "python"),
    ("qx_utilities.general.dicomdeid.change_dicom_files",           "Changes all the dicom files in the specified folder according the `paramfile`.",           "python"),
    ("qx_utilities.general.fidl.check_fidl",                        "Prints figures showing fidl events and their duration.",                                   "python"),
    ("qx_utilities.processing.workflow.compute_bold_stats",         "Compute BOLD movement and signal statistics.",                                             "python"),
    ("qx_utilities.general.utilities.create_batch",                 "Creates a joint batch file from source files in all session folders.",                     "python"),
    ("qx_utilities.processing.workflow.create_bold_brain_masks",    "Create brain masks for BOLD runs.",                                                        "python"),
    ("qx_utilities.general.utilities.create_conc",                  "Creates a set of .conc formated files.",                                                   "python"),
    ("qx_utilities.general.utilities.create_list",                  "Creates a .list formated file.",                                                           "python"),
    ("qx_utilities.general.utilities.create_session_info",          "Creates session.txt files.",                                                               "python"),
    ("qx_utilities.processing.workflow.create_stats_report",        "Create BOLD movement statistic reports and plots.",                                        "python"),
    ("qx_utilities.general.utilities.create_study",                 "Creates the base study folder structure.",                                                 "python"),
    ("qx_utilities.general.utilities.copy_study",                   "Copies an existing QuNex study into a new one.",                                           "python"),
    ("qx_utilities.general.palm.create_ws_palm_design",             "Prepares the design file.",                                                                "python"),
    ("qx_utilities.bash.dwi_bedpostx_gpu",                          "Runs FSL GPU-enabled bedpostx.",                                                           "bash"),
    ("qx_utilities.bash.dwi_dtifit",                                "Runs FSL's dtifit tool (cluster usable).",                                                 "bash"),
    ("qx_utilities.processing.fsl.fsl_feat",                        "Runs FSL feat command.",                                                                   "python"),
    ("qx_utilities.processing.fsl.fsl_melodic",                     "Runs FSL melodic command.",                                                                "python"),
    ("qx_utilities.processing.dwi.dwi_f99",                         "Runs FSL F99 command.",                                                                    "python"),
    ("qx_utilities.bash.dwi_legacy_gpu",                            "Diffusion image processing for data with or without standard fieldmaps.",                  "bash"),
    ("qx_utilities.bash.dwi_parcellate",                            "Parcellates dense tractography data.",                                                     "bash"),
    ("qx_utilities.bash.dwi_pre_tractography",                      "Generates space for dense whole-brain connectomes.",                                       "bash"),
    ("qx_utilities.bash.dwi_probtrackx_dense_gpu",                  "Runs FSL's GPU-enabled probtrackx for dense whole-brain connectomes.",                     "bash"),
    ("qx_utilities.bash.dwi_seed_tractography_dense",               "Reduces dense tractography data using a seed structure.",                                  "bash"),
    ("qx_utilities.processing.dwi.dwi_xtract",                      "Runs FSL XTRACT command.",                                                                 "python"),
    ("qx_utilities.processing.dwi.dwi_noddi_gpu",                   "Runs CUDIMOT's NODDI microstructure modelling.",                                           "python"),
    ("qx_utilities.bash.dwi_eddy_qc",                               "Runs DWI eddy QC.",                                                                        "bash"),
    ("qx_utilities.processing.workflow.extract_nuisance_signal",    "Extracts nuisance signal from BOLD images.",                                               "python"),
    ("qx_mri.fc.fc_compute_ab_corr",                                "Computes the correlation of each source mask voxel with each target mask voxel.",          "matlab"),
    ("qx_mri.fc.fc_compute_ab_corr_kca",                            "Segments the voxels in smask based on their connectivity pattern with tmask voxels.",      "matlab"),
    ("qx_mri.fc.fc_compute_gbc",                                    "Computes Global Brain Connectivity (GBC) maps.",                                           "matlab"),
    ("qx_mri.fc.fc_compute_gbcd",                                   "Computes GBC averages for each specified ROI for n bands defined as distance from ROI.",   "matlab"),
    ("qx_mri.fc.fc_compute_roifc",                                  "Computes ROI functional connectivity matrices.",                                           "matlab"),
    ("qx_mri.fc.fc_compute_seedmaps",                               "Computes seed based functional connectivity maps.",                                        "matlab"),
    ("qx_mri.fc.fc_extract_roi_timeseries",                         "Extracts and saves region timeseries using the provided ROI specification.",               "matlab"),
    ("qx_mri.fc.fc_preprocess",                                     "Runs single BOLD file based functional connectivity preprocessing.",                       "matlab"),
    ("qx_mri.fc.fc_preprocess_conc",                                "Runs fcMRI preprocessing and GLM analysis a set of BOLD files.",                           "matlab"),
    ("qx_mri.fc.fc_segment_mri",                                    "Segments the voxels in smask based on their connectivity with tmask ROI.",                 "matlab"),
    ("qx_mri.general.general_compute_bold_list_stats",              "Computes BOLD run per frame statistics and scrubbing information for a list of sessions.", "matlab"),
    ("qx_mri.general.general_compute_bold_stats",                   "Computes BOLD run per frame statistics and scrubbing information.",                        "matlab"),
    ("qx_mri.general.general_compute_group_bold_stats",             "Extracts image statistics over the whole group.",                                          "matlab"),
    ("qx_mri.general.general_extract_glm_volumes",                  "Extracts and saves the GLM estimates of the effects of interests.",                        "matlab"),
    ("qx_mri.general.general_extract_roi_glm_values",               "Extracts per ROI estimates of specified effects from a volume or cifti GLM files.",        "matlab"),
    ("qx_mri.general.general_extract_roi_values",                   "Extracts desired statistics from provided files for each ROI.",                            "matlab"),
    ("qx_mri.general.general_find_peaks",                           "Performs smoothing and defines ROIs from peaks.",                                          "matlab"),
    ("qx_mri.general.general_glm_predict",                          "Computes predicted and residual signal based on GLM.",                                     "matlab"),
    ("qx_mri.general.general_image_conjunction",                    "Reads image file, computes conjunction using g_conjunction and saves results.",            "matlab"),
    ("qx_mri.general.general_image_overlap",                        "Prints the overlap of two images, one in red, another in green.",                          "matlab"),
    ("qx_mri.general.general_create_roi",                           "Creates ROI image file based on the provided specification.",                              "matlab"),
    ("qx_mri.general.general_parcellated2dense",                    "Expands the parcelated file to a dense file.",                                             "matlab"),
    ("qx_mri.general.general_plot_bold_timeseries",                 "Creates and saves a plot of BOLD timeseries.",                                             "matlab"),
    ("qx_mri.general.general_plot_bold_timeseries_list",            "Creates and saves a plot of BOLD timeseries for a list of sessions.",                      "matlab"),
    ("qx_mri.general.general_qa_concfile",                          "Computes and saves the specified statistics on images specified in the conc file.",        "matlab"),
    ("qx_utilities.general.dicomdeid.get_dicom_fields",             "Returns an overview of DICOM fields across all the DICOM files.",                          "python"),
    ("qx_utilities.hcp.process_hcp.hcp_asl",                        "Runs HCP ASL pipeline.",                                                                   "python"),
    ("qx_utilities.hcp.process_hcp.hcp_dedrift_and_resample",       "Runs HCP MSMAll pipeline.",                                                                "python"),
    ("qx_utilities.hcp.process_hcp.hcp_diffusion",                  "Runs HCP DWI pipeline.",                                                                   "python"),
    ("qx_utilities.hcp.process_hcp.hcp_fmri_surface",               "Runs HCP fMRI Surface pipeline.",                                                          "python"),
    ("qx_utilities.hcp.process_hcp.hcp_fmri_volume",                "Runs HCP fMRI Volume pipeline.",                                                           "python"),
    ("qx_utilities.hcp.process_hcp.hcp_freesurfer",                 "Runs HCP FreeSurfer pipeline.",                                                            "python"),
    ("qx_utilities.hcp.process_hcp.hcp_icafix",                     "Runs HCP ICAFix pipeline.",                                                                "python"),
    ("qx_utilities.hcp.process_hcp.hcp_make_average_dataset",       "Runs HCP make average dataset pipeline.",                                                  "python"),
    ("qx_utilities.hcp.process_hcp.hcp_msmall",                     "Runs HCP MSMAll pipeline.",                                                                "python"),
    ("qx_utilities.hcp.process_hcp.hcp_post_fix",                   "Runs HCP PostFix pipeline.",                                                               "python"),
    ("qx_utilities.hcp.process_hcp.hcp_post_freesurfer",            "Runs HCP Post FreeSurfer pipeline.",                                                       "python"),
    ("qx_utilities.hcp.process_hcp.hcp_pre_freesurfer",             "Runs HCP PreFreeSurfer pipeline.",                                                         "python"),
    ("qx_utilities.hcp.process_hcp.hcp_long_freesurfer",            "Runs the longitudinal HCP FreeSurfer pipeline.",                                           "python"),
    ("qx_utilities.hcp.process_hcp.hcp_long_post_freesurfer",       "Runs the longitudinal HCP Post FreeSurfer pipeline.",                                      "python"),
    ("qx_utilities.hcp.process_hcp.hcp_reapply_fix",                "Runs HCP ReApplyFix pipeline.",                                                            "python"),
    ("qx_utilities.hcp.process_hcp.hcp_task_fmri_analysis",         "Runs HCP fMRI task analysis pipeline.",                                                    "python"),
    ("qx_utilities.hcp.process_hcp.hcp_temporal_ica",               "Runs HCP temporal ICA pipeline.",                                                          "python"),
    ("qx_utilities.hcp.process_hcp.hcp_apply_auto_reclean",         "Runs HCP apply auto reclean pipeline.",                                                    "python"),
    ("qx_utilities.hcp.process_hcp.hcp_transmit_bias_individual",   "Run HCP Transmit Bias Individual Only pipeline.",                                          "python"),
    ("qx_utilities.general.bids.import_bids",                       "Maps a BIDS dataset to the QuNex Suite file structure.",                                   "python"),
    ("qx_utilities.general.dicom.import_dicom",                     "Processes sessions's DICOM or PAR/REC files and generates NIfTI files.",                   "python"),
    ("qx_utilities.hcp.import_hcp.import_hcp",                      "Maps HCPLS data to the QuNex Suite file structure.",                                       "python"),
    ("qx_utilities.general.fidl.join_fidl",                         "Combines all the fidl files matching root based on the information in conc file.",         "python"),
    ("qx_utilities.general.fidl.join_fidl_folder",                  "Joins all the fidl files that match the name of each conc file in the concfolder.",        "python"),
    ("qx_utilities.hcp.process_hcp.map_hcp_data",                   "Maps HCP preprocessed data to sessions' image folder.",                                    "python"),
    ("qx_mice.process_mice.map_mice_data",                          "Maps mice pipeline data to sessions' image folder.",                                       "python"),
    ("qx_utilities.bash.parcellate_anat",                           "Parcellate T1w and T2w derived measures (e.g. myelin or thickness).",                      "bash"),
    ("qx_utilities.bash.parcellate_bold",                           "Parcellate BOLD data and generate pconn files.",                                           "bash"),
    ("qx_utilities.processing.workflow.preprocess_bold",            "Preprocesses single BOLD images.",                                                         "python"),
    ("qx_utilities.processing.workflow.preprocess_conc",            "Preprocesses conc bundles of BOLD images.",                                                "python"),
    ("qx_mice.process_mice.preprocess_mice",                        "Mice preprocessing pipeline.",                                                             "python"),
    ("qx_utilities.general.palm.run_palm",                          "Runs second level analysis using PALM permutation resampling.",                            "python"),
    ("qx_utilities.qa.run_qa.run_qa",                               "QuNex quality assurance pipeline.",                                                        "python"),
    ("qx_utilities.bash.run_qc",                                    "Runs visual qc for a given modality: raw nifti,t1w,tw2,myelin,bold,dwi.",                  "bash"),
    ("qx_utilities.bash.run_turnkey",                               "Exectues turnkey QuNex workflow compatible with XNAT Docker engine.",                      "bash"),
    ("qx_utilities.bash.fc_compute_wrapper",                        "Can be used for calculating Global Brain Connectivity (GBC) or functional connectivity (FC).", "bash"),
    ("qx_utilities.hcp.setup_hcp.setup_hcp",                        "Maps images from the sessions's nii folder to HCP minimal preprocessing structure.",       "python"),
    ("qx_mice.setup_mice.setup_mice",                               "Prepares mice data for the mice pipelines.",                                               "python"),
    ("qx_utilities.general.fidl.split_fidl",                        "Splits a multi-bold fidl file into run specific bold files.",                              "python"),
    ("qx_mri.stats.stats_compute_behavioral_correlations",          "Computes correlations between given images and provided data.",                            "matlab"),
    ("qx_mri.stats.stats_p2z",                                      "Converts p to Z values considering one or two tails.",                                     "matlab"),
    ("qx_mri.stats.stats_ttest_dependent",                          "Computes t-test of differences between two dependent groups.",                             "matlab"),
    ("qx_mri.stats.stats_ttest_independent",                        "Computes t-test of differences between two independent groups.",                           "matlab"),
    ("qx_mri.stats.stats_ttest_zero",                               "Computes t-test against zero and saves specified results.",                                "matlab"),
    ("qx_utilities.general.bids.map_nii2bids",                      "Maps images from the sessions's nii folder to BIDS structure.",                            "python"),
]

# commands that are not their own commands
partial_commands = ["compute_bold_fc"]
