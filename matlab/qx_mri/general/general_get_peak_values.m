function [] = general_get_peak_values(peak_report, fin, fout)

%``function [] = general_get_peak_values(peak_report, img)``
%
%   Returns a file (fout) with values from the input image (fin) at
%   specified coma-separated grayordinates or a modified peak report file
%   from the general_find_peaks function with appended columns
%   corresponding to the values in the fin image at every peak's
%   grayordinate.
%
%   INPUTS
%   ======
%
%   --peak_report  a file with comma-separated grayordinates or the peak
%                  report text file generated by general_find_peaks
%                  function
%   --fin          input image file name
%   --fout         output file name ['outputPeakValues.txt']
%

if nargin < 3 || isempty(fout), fout = peak_report; end

% -- read ROI report (output from general_find_peaks)
in_table = readtable(peak_report);

% -- check if the table is empty (meaning that the file is a simple csv
%    list of grayordinates)
if isempty(in_table)
    % -- read the input file as a matrix
    in_gray = readmatrix(peak_report);
    
    % -- convert a matrix format to a vector (in case the user specified
    %    the file across multiple lines)
    in_gray = reshape(in_gray, 1, []);
    
    simple_file = true;
else
    % -- read file header lines (for generating the output file)
    head_file = fopen(peak_report, 'r');
    head_lines = cell(1, 4);
    for i=1:1:length(head_lines)
        head_lines{i} = fgets(head_file);
    end
    fclose(head_file);
    
    % -- extract grayordinates from the report file
    in_gray = in_table.Grayord;
    
    simple_file = false;
end

% -- read the input image file
img = nimage(fin);

% -- extract values at desired grayordinates
out_val = img.data(in_gray,:);

if simple_file
    % -- generate the output file
    repf = fopen(fout, 'w');
    fprintf(repf, '#source: %s\n\n', fin);
    
    fprintf(repf, 'grayord');
    for i=1:1:size(out_val,2)
        fprintf(repf, '\tframe_%d', i);
    end
    
    fprintf(repf, '\n');
    
    for i=1:1:length(in_gray)
        fprintf(repf, '%d', in_gray(i));
        for j=1:1:size(out_val,2)
            fprintf(repf, '\t%0.3f', out_val(i,j));
        end
        fprintf(repf, '\n');
    end
    
    fclose(repf);
else
    % -- generate output table
    out_table = in_table;
    
    % -- append new column to the data
    fin_string = regexp(fin,'^([^.]+)','match');
    if size(out_val,2) > 1
        for i=1:1:size(out_val,2)
            frame_string = sprintf('%s_frame_%d',fin_string{1},i);
            out_table.(frame_string) = out_val(:,i);
        end
    else
        out_table.(fin_string{1}) = out_val;
    end
    
    % -- generate the output file
    repf = fopen(fout, 'w');
    for i = 1:numel(head_lines)
        fprintf(repf, '%s', head_lines{i});
    end
    
    for i=1:1:numel(out_table.Properties.VariableNames)
        fprintf(repf, '%s\t', out_table.Properties.VariableNames{i});
    end
    
    for i=1:1:size(out_table,1)
        fprintf(repf, '\n');
        for j=1:1:size(out_table,2)
            fprintf(repf, '%s\t', string(out_table{i,j}));
        end
    end
    
    fclose(repf);
end

end

